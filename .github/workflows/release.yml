name: Build and Release APK & IPA

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build_android:
    runs-on: ubuntu-latest  # Android build runs on Ubuntu

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up JDK 17 (using Temurin)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Build the Android APK (adjust task if necessary based on the task list)
      - name: Build Android APK
        run: ./gradlew assembleRelease  # Adjust based on your output from List Gradle tasks

      # Upload APK artifact
      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: PruebaKotlinMultiplatform-app-release-apk
          path: PruebaKotlinMultiplatform/android/build/outputs/apk/release/app-release.apk

  build_ios:
    runs-on: macos-latest  # iOS build requires macOS runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up JDK 17 (using Temurin)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # List Gradle tasks for debugging
      - name: List Gradle tasks
        run: ./gradlew tasks

      # Build the iOS binaries
      - name: Build iOS binaries
        run: ./gradlew :composeApp:iosX64Binaries

      # List files for iOS build to locate the IPA
      - name: List files for iOS build
        run: find . -type f -name "*.ipa"

      # Package iOS app to IPA
      - name: Package iOS app to IPA
        run: |
          xcodebuild -workspace PruebaKotlinMultiplatform/ios/composeApp.xcworkspace -scheme composeApp -sdk iphoneos -archivePath $PWD/build/composeApp.xcarchive archive
          xcodebuild -exportArchive -archivePath $PWD/build/composeApp.xcarchive -exportPath $PWD/build/composeApp.ipa -exportOptionsPlist $PWD/ios/ExportOptions.plist

      # Upload IPA artifact
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v3
        with:
          name: PruebaKotlinMultiplatform-app-release-ipa
          path: $PWD/build/composeApp.ipa  # Update path based on where IPA is created

  create_release:
    needs: [build_android, build_ios]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            PruebaKotlinMultiplatform/android/build/outputs/apk/release/app-release.apk
            PruebaKotlinMultiplatform/ios/build/composeApp.ipa
